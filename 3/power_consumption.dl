
#include "lines.dl"

.decl len(r:number)
len(r):-r=max i:{lines(i,_)}.

//.printsize lines

.decl mask(i:number,j:number,r:number)
mask(a,b,m):-lines(a,v),
  b=range(0,16), 
  m=v band 2^b.

.decl _bit(data:number,position:number,value:number)
_bit(a,b,k):-mask(a,b,0),k=0.
_bit(a,b,k):-mask(a,b,t),t>0,k=1.

.decl bitsums(position:number,result:number)
///* shut up and copy-paste from mk_dl.js
bitsums(0,S):-S=count:{_bit(_,0,1)}.
bitsums(1,S):-S=count:{_bit(_,1,1)}.
bitsums(2,S):-S=count:{_bit(_,2,1)}.
bitsums(3,S):-S=count:{_bit(_,3,1)}.
bitsums(4,S):-S=count:{_bit(_,4,1)}.
///*
bitsums(5,S):-S=count:{_bit(_,5,1)}.
bitsums(6,S):-S=count:{_bit(_,6,1)}.
bitsums(7,S):-S=count:{_bit(_,7,1)}.
bitsums(8,S):-S=count:{_bit(_,8,1)}.
bitsums(9,S):-S=count:{_bit(_,9,1)}.
bitsums(10,S):-S=count:{_bit(_,10,1)}.
bitsums(11,S):-S=count:{_bit(_,11,1)}.
//*/

.decl gamma_bits(position:number, v:number)
gamma_bits(p,1) :- bitsums(p,r), len(L), r > L/2.
gamma_bits(p,0) :- bitsums(p,r), len(L), r <= L/2.

.decl epsilon_bits(position:number, v:number)
epsilon_bits(p,0) :- bitsums(p,r), len(L), r > L/2.
epsilon_bits(p,1) :- bitsums(p,r), len(L), r <= L/2.

.decl GAMMA(r:number)
GAMMA(R):-R=sum v : { gamma_bits(y,t), v=t*2^y }.

.decl EPSILON(r:number)
EPSILON(R):-R=sum v : { epsilon_bits(y,t), v=t*2^y }.

.decl ANSWER(r:number)
ANSWER(r):-GAMMA(g),EPSILON(e),r=g*e.

.output ANSWER
